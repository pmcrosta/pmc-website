---
title: "Building a dataset"
author: "Peter M. Crosta"
format:
  html:
    code-fold: true
    df-print: paged
    code-overflow: scroll
    toc: true
    toc-depth: 3
    toc-location: left
---

# Introduction

To gain a better understanding of the current state of education in Fair Haven, I started by building a data set. This document shares the process I went through to combine state and federal resources to generate data sets that ultimately would enable the following:

-   Creation of a set of suitable comparison school districts for Fair Haven
-   An analysis of student outcomes, educational inputs, and their relationship over time

In an effort to be as transparent as possible, this document will contain descriptions of source and derived data sets as well as code in the R programming language that one can use to reproduce results.

```{r}
#| label: setup
#| code-summary: Code - Load libraries
#| message: false
#| warning: false
#| eval: true
options(width = 120)

library(tidyverse)
library(readxl)
library(googlesheets4)
library(googledrive)
library(haven)
library(cluster)
library(MASS)
library(ggpmisc)
library(ggrepel)
library(ggfortify)
library(glue)
library(DT)
library(htmltools)

set.seed(2024)

# Commonly used State ID numbers (staid) and Federal Local Education Authority (LEA) IDs
# for FH, Little Silver, Rumson, and Shrewsbury
fh_leaid <- "3404950"
fh_staid <- "NJ-251440"

ls_leaid <- "3408790"
ls_staid <- "NJ-252720"

rums_leaid <- "3414370"
rums_staid <- "NJ-254570"

shrews_leaid <- "3414970"
shrews_staid <- "NJ-254770"
```

# ACS EDGE

ACS EDGE, or the American Community Survey (ACS) [Education Demographic and Geographic Estimates (EDGE)](https://nces.ed.gov/programs/edge/Demographic/ACS), data contains district-level social, economic, housing, and demographic detail based on the ACS 5-year summary files. I use this data to generate peer districts (comparison groups) for Fair Haven. The latest available data was the [2018-22](https://nces.ed.gov/programs/edge/TableViewer/acsProfile/2022) data, and I use the Population Group: Total Population. The raw data that was downloaded from ACS came as zipped XLSX files. The zip files were uploaded to a Google Drive folder, where they could be accessed and parsed. The collapsed code chunk below creates data frames from the raw ACS EDGE data.

```{r}
#| label: read-acs-edge
#| echo: true
#| message: false
#| warning: false
#| eval: true
#| cache: true
#| code-summary: Code - Read ACS EDGE Files from Google Drive

#Auth Google Drive and Sheets
drive_auth(path = "../pmcrosta-datascience-ed9fcc88faf6.json")
gs4_auth(path = "../pmcrosta-datascience-ed9fcc88faf6.json")

edge_zips <- drive_find(pattern='edge', type='zip') %>% dplyr::select(name, id)

## download, unzip, and clean up files. create edge_* data frames.

obnames <- vector()
for (ii in 1:nrow(edge_zips)) {
  
  temp <- tempfile(fileext = ".zip")
  dl <- drive_download(
    as_id(edge_zips$id[ii]), path = temp, overwrite = TRUE)
  out <- unzip(temp, exdir = tempdir())
  
  outtxt <- grep(pattern="txt$", x = out, value = T)
  object_name <- str_remove(edge_zips$name[ii], ".zip")
  assign(object_name, read.table(outtxt, sep="|", header=T) %>% dplyr::select(-ends_with("moe")))
  
  outxls <- grep(pattern="xlsx$", x = out, value = T)
  data_dict <- read_excel(outxls, sheet="DP_TotalPop") %>% dplyr::filter(varname %in% colnames(get(object_name)))
  newnames <- data_dict$varname
  names(newnames) <- data_dict$vlabel
  
  duplicate_cols <- duplicated(as.list(get(object_name)))
  df_unique <- get(object_name)[!duplicate_cols]
  newnames <- newnames[newnames %in% colnames(df_unique)]
  
  assign(object_name, df_unique %>% dplyr::rename(all_of(newnames)))

  obnames <- c(obnames, object_name)
}

glue("Data frames created: ", paste(obnames, collapse=", "))
```

Next, I isolate the variables that will be useful for generating peer districts. Major categories include:

-   Educational attainment
-   Employment status
-   Educational enrollment
-   Household type and size
-   Housing occupancy
-   Household income
-   Occupation distribution
-   Demographics (race, sex, age)

```{r}
#| label: process-edge-data
#| echo: true
#| message: false
#| warning: false
#| eval: true
#| cache: true
#| code-summary: Code - Process EDGE data and create district-level data set

edge_edattain_df <- edge_edattain %>%
  dplyr::select(GeoId, Geography, LEAID, starts_with("Percent")) %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE)))

edge_employmentstatus_df <- edge_employmentstatus %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE))) %>%
  dplyr::select(LEAID, starts_with("Percent")) %>%
  dplyr::select(LEAID, ends_with("__In_labor_force") | contains("Unemployment"))

edge_enrollment_df <- edge_enrollment %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE))) %>%
  dplyr::select(LEAID, starts_with("Percent"))

edge_householdstype_df <-  edge_householdstype %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE))) %>%
  dplyr::select(LEAID,
                Percent__Estimate__HOUSEHOLDS_BY_TYPE__Total_households__Married_couple_household__With_children_of_the_householder_under_18_years,
                Number__Estimate__HOUSEHOLDS_BY_TYPE__Total_households__Average_household_size,
                Number__Estimate__HOUSEHOLDS_BY_TYPE__Total_households__Average_family_size)

edge_housing_df <- edge_housing %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE))) %>%
  dplyr::select(LEAID, Number__Estimate__HOUSING_OCCUPANCY__Total_housing_units)

edge_income_df <- edge_income %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE))) %>%
  dplyr::select(LEAID,
                Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households__Median_household_income__dollars_,
                Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households__Mean_household_income__dollars_,
                Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families__Median_family_income__dollars_,
                Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families__Mean_family_income__dollars_,
                Percent__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families___150_000_to__199_999,
                Percent__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families___200_000_or_more,
                Percent__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households___150_000_to__199_999,
                Percent__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households___200_000_or_more) %>%
  dplyr::mutate(
    Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households__Median_household_income__dollars_ = str_replace(Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households__Median_household_income__dollars_, fixed("250,000+"), "275000"),
    Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families__Median_family_income__dollars_ = str_replace(Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families__Median_family_income__dollars_, fixed("250,000+"), "275000")
  )

edge_occupation_df <- edge_occupation %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE))) %>%
  dplyr::select(LEAID, starts_with("Percent"))

edge_race_df <- edge_race %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE))) %>%
  dplyr::select(LEAID, starts_with("Percent__Estimate__Race_alone_or_in_combination_with_one_or_more_other_races"))

edge_sex_age_df <- edge_sex_age %>%
  rename_with(~ gsub("\\.", "_", make.names(., unique = TRUE))) %>%
  dplyr::select(GeoId, Geography, LEAID, starts_with("Percent")) %>%
  dplyr::select(LEAID, Percent__Estimate__SEX_AND_AGE__Total_population__Under_18_years)

edge_df <- edge_edattain_df %>%
  dplyr::filter(LEAID != "3499999") %>%
  dplyr::left_join(edge_employmentstatus_df, by="LEAID") %>%
  dplyr::left_join(edge_enrollment_df, by="LEAID") %>%
  dplyr::left_join(edge_householdstype_df, by="LEAID") %>%
  dplyr::left_join(edge_housing_df, by="LEAID") %>%
  dplyr::left_join(edge_occupation_df, by="LEAID") %>%
  dplyr::left_join(edge_race_df, by="LEAID") %>%
  dplyr::left_join(edge_sex_age_df, by="LEAID") %>%
  dplyr::left_join(edge_income_df, by="LEAID") %>%
  dplyr::mutate(
    Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__Nursery_school__preschool = as.numeric(Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__Nursery_school__preschool),
    Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__Kindergarten = as.numeric(Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__Kindergarten),
    Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__Elementary_school__grades_1_8_ = as.numeric(Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__Elementary_school__grades_1_8_),
    Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__High_school__grades_9_12_ = as.numeric(Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__High_school__grades_9_12_),
    Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__College_or_graduate_school = as.numeric(Percent__Estimate__SCHOOL_ENROLLMENT__Population_3_years_and_over_enrolled_in_school__College_or_graduate_school),
    
    Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households__Median_household_income__dollars_ = as.numeric(Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households__Median_household_income__dollars_),
    Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households__Mean_household_income__dollars_ = as.numeric(Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Total_households__Mean_household_income__dollars_),
    Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families__Median_family_income__dollars_ = as.numeric(Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families__Median_family_income__dollars_),
    Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families__Mean_family_income__dollars_ = as.numeric(Number__Estimate__INCOME_AND_BENEFITS__IN_2022_INFLATION_ADJUSTED_DOLLARS___Families__Mean_family_income__dollars_)
  )

colnames(edge_df) <- c(
  "GeoId",
  "Geography",
  "LEAID",
  "Edu_Less_9th",
  "Edu_9th_12th_No_Diploma",
  "Edu_HS_Grad",
  "Edu_Some_College",
  "Edu_Assoc_Degree",
  "Edu_Bach_Degree",
  "Edu_Grad_Prof_Degree",
  "Edu_HS_or_Higher",
  "Edu_Bach_or_Higher",
  "Emp_Labor_Force",
  "Emp_Fem_Labor_Force",
  "Emp_Unemp_Rate",
  "Enroll_Nursery",
  "Enroll_Kindergarten",
  "Enroll_Elem",
  "Enroll_HS",
  "Enroll_College",
  "HH_Married_Children",
  "HH_Avg_Size",
  "Fam_Avg_Size",
  "Housing_Units",
  "Occ_Mgmt_Bus_Sci_Arts",
  "Occ_Service",
  "Occ_Sales_Office",
  "Occ_Nat_Res_Const_Maint",
  "Occ_Prod_Trans_Mat_Mov",
  "Race_White",
  "Race_Black",
  "Race_Amer_Indian_Alaska",
  "Race_Asian",
  "Race_Hawaiian_Pacific",
  "Race_Other",
  "Pop_Under_18",
  "HH_Med_Income",
  "HH_Mean_Income",
  "Fam_Med_Income",
  "Fam_Mean_Income",
  "Fam_Income_150k_199k",
  "Fam_Income_200k_plus",
  "HH_Income_150k_199k",
  "HH_Income_200k_plus"
)

glue("Created `edge_df`. `edge_df` has {nrow(edge_df)} rows and {ncol(edge_df)} columns.")
```

`edge_df` now has the following columns and definitions:

-   **Identifiers:**

    -   `GeoId`: Geographic identifier
    -   `Geography`: District name
    -   `LEAID`: Local education authority ID

-   **Educational Attainment (percent of population age 25 and older) :**

    -   `Edu_Less_9th`: Less than 9th grade
    -   `Edu_9th_12th_No_Diploma`: 9th to 12th grade, no diploma
    -   `Edu_HS_Grad`: High school graduate
    -   `Edu_Some_College`: Some college, no degree
    -   `Edu_Assoc_Degree`: Associate's degree
    -   `Edu_Bach_Degree`: Bachelor's degree
    -   `Edu_Grad_Prof_Degree`: Graduate or professional degree
    -   `Edu_HS_or_Higher`: High school graduate or higher
    -   `Edu_Bach_or_Higher`: Bachelor's degree or higher

-   **Employment Status (percent of population 16 years and older):**

    -   `Emp_Labor_Force`: In labor force
    -   `Emp_Fem_Labor_Force`: Females in labor force
    -   `Emp_Unemp_Rate`: Unemployment rate

-   **School Enrollment (percent of population 3 years and older) :**

    -   `Enroll_Nursery`: Nursery school
    -   `Enroll_Kindergarten`: Kindergarten
    -   `Enroll_Elem`: Elementary school
    -   `Enroll_HS`: High school
    -   `Enroll_College`: College or graduate school

-   **Households:**

    -   `HH_Married_Children`: Percent married couple households with children under 18 years
    -   `HH_Avg_Size`: Average household size
    -   `Fam_Avg_Size`: Average family size
    -   `Housing_Units`: Total housing units

-   **Occupation (percent civilians 16 years and older):**

    -   `Occ_Mgmt_Bus_Sci_Arts`: Management, business, science, and arts
    -   `Occ_Service`: Service occupations
    -   `Occ_Sales_Office`: Sales and office occupations
    -   `Occ_Nat_Res_Const_Maint`: Natural resources, construction, and maintenance
    -   `Occ_Prod_Trans_Mat_Mov`: Production, transportation, and material moving

-   **Race (percent):**

    -   `Race_White`: White
    -   `Race_Black`: Black or African American
    -   `Race_Amer_Indian_Alaska`: American Indian and Alaska Native
    -   `Race_Asian`: Asian
    -   `Race_Hawaiian_Pacific`: Native Hawaiian and Other Pacific Islander
    -   `Race_Other`: Some Other Race

-   **Population (percent):**

    -   `Pop_Under_18`: Population under 18 years

-   **Income:**

    -   `HH_Med_Income`: Median household income
    -   `HH_Mean_Income`: Mean household income
    -   `Fam_Med_Income`: Median family income
    -   `Fam_Mean_Income`: Mean family income
    -   `Fam_Income_150k_199k`: Percent with family income \$150,000 to \$199,999
    -   `Fam_Income_200k_plus`: Percent with family income \$200,000 or more
    -   `HH_Income_150k_199k`: Percent with household income \$150,000 to \$199,999
    -   `HH_Income_200k_plus`: Percent with household income \$200,000 or more

Finally, I serialize the `edge_df` data frame so that it can be accessed without having to rerun all this code. Here are links to an [RDS](datasets/edge_df.rds) file or a [CSV](datasets/edge_df.csv) file

```{r}
#| label: save-edge-data
#| echo: true
#| message: false
#| warning: false
#| eval: true
#| cache: true
#| code-summary: Code - Serialize ACD-EDGE dataset and make accessible
#| dependson: process-edge-data

saveRDS(edge_df, file="datasets/edge_df.rds")
write_csv(edge_df, file="datasets/edge_df.csv")
```

```{r}
#| label: show-edgedf
#| echo: false
#| message: false
#| warning: false
#| dependson: process-edge-data

datatable(edge_df %>% dplyr::select(-GeoId),
  options = list(
    pageLength = 5,
    searching = TRUE,
    ordering = TRUE
  ),
  rownames = FALSE,
  caption = tags$caption(
    style = "caption-side: top; text-align: center;",
    "ACS-EDGE Data")
)
```

# Generating Peer Districts

The main purpose of collecting the ACS-EDGE data is to generate a set of districts that can help us to understand trends in Fair Haven and not in isolation. Due to geographical proximity and social integration, the *de facto* peer group for Fair Haven has mostly consisted of Rumson Borough, Little Silver Borough, and Shrewsbury Borough. I will certainly be highlighting these districts as we proceed. However, it is also instructive to have a broader set of districts that serve a population that is similar to Fair Haven along numerous demographic characteristics. I use the ACS-EDGE data to generate such a set of districts.

::: callout-note
## Why not use District Factor Groups?

For years, people have used [District Factor Groups](https://nj.gov/education/finance/rda/dfg.shtml) (DFGs) for the purpose of comparing students’ performance on statewide assessments across demographically similar school districts. However, the School Performance Reports no longer compare districts using this measure, and no updates have been made to the DFGs since the groupings were finalized in 2004.
:::

## Approaches

I leverage a number of techniques to generate peer districts for Fair Haven using these data. This exercise is both an art and science, as it is both grounded in data and subject to a number of researcher choices. To that end, a few sets of comparison districts will be created. Note that the final comparison data sets will be filtered to only include PK-8 districts like Fair Haven; this will happen later though since it requires yet another data source. In addition, the following section is not a "full academic" treatment of these approaches, meaning that the primary end is to be useful, not necessarily to fully account for all methodological nuances. However, I will compare district characteristics across various peer sets.

### Euclidean distance

One simple, albeit somewhat naive, approach to identifying peer districts is to find the districts that are "closest" to each other given the district characteristics that were identified above. To do this, I

1.  Standardize all of our variables
2.  Compute a distance matrix (Euclidean distance in multidimensional space)
3.  Rank districts in terms of their "proximity" to Fair Haven

One downside to this strategy is that there are a number of highly correlated variables in the data set, and the distance matrix may overweight importance of these characteristics. For example, there are a number of income-based measures, and thus this approach may over-index on the household incomes of district residents. However, it may also produce a reasonable peer set.

```{r}
#| label: euclidean
#| echo: true
#| message: false
#| warning: false
#| eval: true
#| cache: true
#| code-summary: Code - Using Euclidean distance
#| dependson: process-edge-data

# Standardize variables
edge_df_scale <- scale(edge_df[,-c(1:3)])
rownames(edge_df_scale) <- edge_df$LEAID

## compute the distance matrix
edge_dist <- dist(edge_df_scale, method = "euclidean")

# Find the indices of the closest districts
closest_indices_euclid <- order(as.matrix(edge_dist)[, which(attr(edge_dist, "Labels")==fh_leaid)])

# Reorder edge_df so the most similar districts are on top
similar_districts_euclid <- edge_df[closest_indices_euclid, ] %>% dplyr::mutate(euclid_score=1:n()) %>% dplyr::select(LEAID, Geography, euclid_score)

# Print table
datatable(similar_districts_euclid,
  options = list(
    pageLength = 10,
    searching = TRUE,
    ordering = TRUE
  ),
  rownames = FALSE,
  caption = tags$caption(
    style = "caption-side: top; text-align: center;",
    "Most similar districts by Euclidean distance")
)
```

### Mahalanobis distance

A second smiple distance-based approach is to use the [Mahalanobis](https://en.wikipedia.org/wiki/Mahalanobis_distance) distance, as it is capable of taking into coniderations the correlations present in the data set. To do this, I

1.  Standardize all of our variables
2.  Compute a distance matrix (Mahalanobis pairwise distances)
3.  Rank districts in terms of their "proximity" to Fair Haven

```{r}
#| label: mahalanobis
#| echo: true
#| message: false
#| warning: false
#| eval: true
#| cache: true
#| code-summary: Code - Using Mahalanobis distance
#| dependson: process-edge-data

# Standardize variables
edge_df_scale <- scale(edge_df[,-c(1:3)])
rownames(edge_df_scale) <- edge_df$LEAID

mahalanobis_dist_matrix <- function(data) {
  cov_matrix <- cov(data)
  n <- nrow(data)
  dist_matrix <- matrix(0, nrow = n, ncol = n)

  for (i in 1:n) {
    for (j in 1:n) {
      dist_matrix[i, j] <- mahalanobis(data[i, ], data[j, ], cov_matrix)
    }
  }
  return(dist_matrix)
}

## compute the distance matrix
dist_mat_mah <- mahalanobis_dist_matrix(na.omit(edge_df_scale))
rownames(dist_mat_mah) <- dimnames(na.omit(edge_df_scale))[[1]]

# Find the indices of the closest districts
closest_indices_mah <- order(as.matrix(dist_mat_mah)[, which(rownames(dist_mat_mah)==fh_leaid)])

# Print the most similar districts
similar_districts_mah <- (edge_df %>% dplyr::filter(LEAID %in% rownames(dist_mat_mah))) [closest_indices_mah, ] %>% dplyr::mutate(mah_score=1:n()) %>% dplyr::select(LEAID, Geography, mah_score)

# Print table
datatable(similar_districts_mah,
  options = list(
    pageLength = 10,
    searching = TRUE,
    ordering = TRUE
  ),
  rownames = FALSE,
  caption = tags$caption(
    style = "caption-side: top; text-align: center;",
    "Most similar districts by Mahalanobis distance")
)
```

### Principal Components

Another strategy for identifying peer districts is a dimensionality reduction technique called Principal Components Analysis. This is actually the same technique used to develop the original District Factor Groups. Though here I am using more data and more recent data. The central idea is to reduce our 40-dimensional (40-column) data set into a smaller set of components (or dimensions) that are maximally different from each other and uncorrelated with each other. These new components would contain the essence of the larger set of columns. As in the DFG calculation, I expect the first principal component to contain the variance associated with socioeconomic status (SES).

The general procedure is to:

1.  Compute the principal components on the data set
2.  Assess which dimensions load in which principal components
3.  Rank order component of interest, and find districts surrounding Fair Haven

If the first one or two components is not sufficient, we are in clustering territory, which will be addressed later.

```{r}
#| eval: true
#| include: true
#| label: pca-dev
#| echo: true
#| message: false
#| warning: false
#| cache: true
#| code-summary: Code - Using Principal Components
#| dependson: process-edge-data
#| fig-cap: "Loadings from first two components of the PCA."

# Perform PCA
pcadat <- na.omit(edge_df[,-c(1:3)])
rownames(pcadat) <- make.unique(na.omit(edge_df)$Geography)
pca_result <- prcomp(pcadat, scale.=T, center = T)

#round(pca_result$sdev^2/sum(pca_result$sdev^2), 2) #first two ~49% variance, 37+12

# Extract principal components
pc_all_scores <- pca_result$x

#Visualize the reduced data
#autoplot(pca_result, data = pcadat, label = TRUE, label.size = 3)

# Get loadings
pca_loadings <- pca_result$rotation

# Transform loadings into a long format data frame
loadings_df <- as.data.frame(pca_loadings)
loadings_df$Variable <- rownames(pca_loadings)
loadings_long <- reshape2::melt(loadings_df, id.vars = "Variable", variable.name = "PC", value.name = "Loading")

```

In @fig-pca, it is clear that Component 1 (PC1) is loading on income and education dimensions, which are qualitatively aligned with SES. However, Component 2 (PC2) is loading on other potentially relevant dimensions, such as family size and the population under 18. Note the differences below in the districts that surround Fair Haven for both PC1 and PC2.

::: panel-tabset
#### PCA Heatmap
``` {r}
#| eval: true
#| include: true
#| label: fig-pca
#| echo: true
#| message: false
#| warning: false
#| cache: true
#| dependson: pca-dev
#| fig-cap: "Loadings from first two components of the PCA."
#| fig-width: 4
#| fig-height: 6
#| fig-align: center
#| out-width: 80%

# Create heatmap
ggplot(loadings_long %>% filter(PC %in% c("PC1", "PC2")), aes(x = PC, y = Variable, fill = Loading)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", mid = "white", high = "orange") +
  theme_minimal() +
  labs(title = "PCA Loadings", x="", y="")
```

#### PC1 Peers

``` {r}
#| eval: true
#| include: true
#| label: pc1-peers
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| dependson: pca-dev

pc_all_scores_df <- pc_all_scores %>% 
    as_tibble(rownames = "Geography") %>%
    dplyr::mutate(LEAID=na.omit(edge_df)$LEAID) %>% 
    arrange(PC1)

fh_pcaid <- which(pc_all_scores_df$LEAID == fh_leaid)

table_dat1 <- pc_all_scores_df[(max(0,fh_pcaid-30)):(fh_pcaid+30), c("Geography", "LEAID", "PC1")]

knitr::kable(table_dat1, format = "html", row.names = FALSE)
```

#### PC2 Peers

``` {r}
#| eval: true
#| include: true
#| label: pc2-peers
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| dependson: pca-dev

pc_all_scores_df <- pc_all_scores %>% 
    as_tibble(rownames = "Geography") %>%
    dplyr::mutate(LEAID=na.omit(edge_df)$LEAID) %>% 
    arrange(PC2)

fh_pcaid <- which(pc_all_scores_df$LEAID == fh_leaid)

table_dat2 <- pc_all_scores_df[(max(0,fh_pcaid-30)):(fh_pcaid+30), c("Geography", "LEAID", "PC2")]

knitr::kable(table_dat2, format = "html", row.names = FALSE)
```
:::

### Clustering

A final approach to identifying peer districts is cluster analysis. Cluster analysis leverages distance functions to separate districts based on similarity, with the goal of creating groups of high similarity *within* clusters and high dissimilarity *between* clusters. I will explore both K-means and hierarchical clustering techniques, looking at a few examples of each.

#### K-means clusters

K-means clustering requires a distance matrix as input, and we have already created Euclidean and Mahalanobis distance matrices. The PCA results from earlier can also be converted to distance matrix and thus clustered. Both scaled and un-scaled PCA results are clustered. The un-scaled version should over-weight PC1, and the scaled version should treat PC1 and PC2 more equally. The tab set below shows the resulting peer groups from a relatively simple K-means routine, assuming 10 clusters.

```{r}
#| label: kmeans-dev
#| echo: true
#| message: false
#| warning: false
#| eval: true
#| cache: true
#| code-summary: Code - K-means clustering

## distance matrix from earlier
# Euclidean: edge_dist (557)
# Mahalanobis: dist_mat_mah (555)
# PCA: pc_all_scores (needs dist, scaled and unscaled) (555)

# Scale the principal component scores
scaled_pc_scores <- scale(pc_all_scores[,c(1:2)])
pc_dist_scaled <- dist(scaled_pc_scores)
pc_dist_unscaled <- dist(pc_all_scores[,c(1:2)])

# Apply k-means
km_pc_scaled <- kmeans(pc_dist_scaled, centers = 10)
km_pc_unscaled <- kmeans(pc_dist_unscaled, centers = 10)
km_euclid <- kmeans(edge_dist, centers = 10)
km_maha <- kmeans(dist_mat_mah, centers = 10)

# Access cluster assignments
clusters_pc_scaled <- km_pc_scaled$cluster
clusters_pc_unscaled <- km_pc_unscaled$cluster
clusters_euclid <- km_euclid$cluster
clusters_maha <- km_maha$cluster

fh_pc_scaled <- clusters_pc_scaled["Fair Haven Borough School District, NJ"]
fh_pc_unscaled <- clusters_pc_unscaled["Fair Haven Borough School District, NJ"]
fh_euclid <- clusters_euclid[fh_leaid]
fh_maha <- clusters_maha[fh_leaid]

mat_pc_scaled <- as_tibble(names(clusters_pc_scaled[clusters_pc_scaled==fh_pc_scaled])) %>% rename("PC Scaled"=value)
mat_pc_unscaled <- as_tibble(names(clusters_pc_unscaled[clusters_pc_unscaled==fh_pc_unscaled]))  %>% rename("PC Unscaled"=value)
mat_euclid <- as_tibble(names(clusters_euclid[clusters_euclid==fh_euclid]))  %>% rename("Euclidean"=value) %>%
  dplyr::left_join(edge_df %>% dplyr::select(Geography, LEAID) %>% mutate(LEAID=as.character(LEAID)), by = c("Euclidean"="LEAID"))
mat_maha <- as_tibble(names(clusters_maha[clusters_maha==fh_maha]))  %>% rename("Mahalanobis"=value) %>%
  dplyr::left_join(edge_df %>% dplyr::select(Geography, LEAID) %>% mutate(LEAID=as.character(LEAID)), by = c("Mahalanobis"="LEAID"))

```

::: panel-tabset
##### PC Scaled
``` {r}
#| eval: true
#| include: true
#| label: kmpc-scaled
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| dependson: kmeans-dev

knitr::kable(mat_pc_scaled)
```

##### PC Unscaled
``` {r}
#| eval: true
#| include: true
#| label: kmpc-unscaled
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| dependson: kmeans-dev

knitr::kable(mat_pc_unscaled)
```

##### Euclidean
``` {r}
#| eval: true
#| include: true
#| label: kmeuclid
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| dependson: kmeans-dev

knitr::kable(mat_euclid)
```

##### Mahalanobis
``` {r}
#| eval: true
#| include: true
#| label: kmmaha
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| dependson: kmeans-dev

knitr::kable(mat_maha)
```
:::

#### Hierarchical

```{r}
#| include: false
#| eval: false

# Hierarchical clustering using Ward and Complete Linkage
hc1 <- hclust(edge_d, method = "ward.D" )
hc2 <- hclust(edge_d, method="complete")

options(repr.plot.width=14, repr.plot.height=8)

# Plot the obtained dendrogram
plot(hc1, cex = 0.6, hang = -1)
rect.hclust(hc1, k = 10) #, border = 2:5)

options(repr.plot.width=14, repr.plot.height=8)

# Plot the obtained dendrogram
plot(hc2, cex = 0.6, hang = -1)
rect.hclust(hc2, k = 10) #, border = 2:5)

hc1_grp10 <- cutree(hc1, k = 10)
fh1 <- hc1_grp10[fh_leaid]
edge_df$hc1_grp10 <- hc1_grp10

fh1

edge_df %>% dplyr::filter(hc1_grp10==fh1) %>% pull(Geography)

table(hc1_grp10)

hc2_grp10 <- cutree(hc2, k = 10)
fh2 <- hc2_grp10[fh_leaid]
edge_df$hc2_grp10 <- hc2_grp10

fh2

table(hc2_grp10)

edge_df %>% dplyr::filter(hc2_grp10==fh2) %>% pull(Geography)

edge_df %>% dplyr::group_by(hc1_grp10) %>%
  dplyr::select(-GeoId, -Geography, -LEAID) %>%
  dplyr::summarise_all(\(x) round(mean(x), 1)) %>% t()

```

### Recap of Peer Set Approaches

## Comparing Peer Sets

# Common Core Data (2023-24) #

# Financial Data (User Friendly Budgets) #

# Report Card Data #

# Bring the data together #